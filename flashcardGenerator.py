from ollama import chat
from ollama import ChatResponse
import json

class flashcardGenerator() :
  def __init__(self, text):
    self.transcription = text.replace('\'', '')
    self.cards = None

  def generateCards(self):
    # topicResponse: ChatResponse = chat(model='llama3.2', messages=[
    #   {
    #     'role': 'user',
    #     'content': 'What is the general topic of this summary of a transcribed lecture given in 1 phrase: ' + self.transcription
    #     # 'content': 'Generate 3 calculation questions and answers to test someone\'s knowledge in the form of a JSON object with the keys being \"cardn\" where n is replaced with the number of the question and answer pairs and then the key of the questions and answers are q and a respectively.' +
    #     # 'Use the following information to generate the question topics: ' + self.transcription,
    #   },
    # ])
    # topic = topicResponse.message.content
    flashcardString: ChatResponse = chat(model='llama3.2', messages=[
      {
        'role': 'user',
        'content': self.transcription + 'Generate 3 calculation questions and answers to test someone\'s knowledge of this topic in the form of a JSON object with the keys being \"card1\" which increnents by the number of the question and answer pairs and then the key of the questions and answers are q and a respectively.'
      },
    ])
    print(flashcardString.message.content.split('```')[1])
    self.cards = json.loads(flashcardString.message.content.split('```')[1])
    
  def getCards(self): 
    if self.cards == None: raise Exception ("No cards were generated")
    else: return self.cards

def main():
  gen = flashcardGenerator('Cats are cool')
  # gen = flashcardGenerator('This is a three it\'s sloppily written and rendered at an extremely low resolution of 28 by 28 pixels but your brain has no trouble recognizing it as a three and i want you to take a moment to appreciate how crazy it is the brains can do this so effortlessly i mean this this and this are also recognizable as threes even though the specific values of each pixel is very different from one image to the next the particular light sensitive cells in your eyes that are firing when you see this three are very different from the ones firing when you see this three but something in that crazy smart visual cortex of yours resolves these as representing the same idea while at the same time recognizing other images as their own distinct ideas but if i told you hey sit down and write for me a program that takes in a grid of 28 by 28 pixels like this and outputs a single number between 0 and 10 telling you what it thinks the digit is all the test goes from comically trivial to dauntingly difficult unless you\'ve been living under a rock i think i hardly need to motivate the relevance and importance of machine learning and neural networks to the present and to the future but what i want to do here is show you what a neural network actually is assuming no background and to help visualize what it\'s doing not as a buzzword but as a piece of math my hope is just that you come away feeling like this structure itself is motivated and to feel like you know what it means when you read or you hear about a neural network quote unquote learning this video is just going to be devoted to the structure component of that and the following one is going to tackle learning what we\'re going to do is put together a neural network that can learn to recognize handwritten digits this is a somewhat classic example for introducing the topic and i\'m happy to stick with the status quo here because at the end of the two videos i want to point you to a couple good resources where you can learn more and where you can download the code that does this and play with it on your own computer there are many many variants of neural networks and in recent years there\'s been sort of a boom in research towards these variants but in these two introductory videos you and i are just going to look at the simplest plain vanilla form with no added frills this is kind of a necessary prerequisite for understanding any of the more powerful modern variants and trust me it\'s still has plenty of complexity for us to wrap our minds around but even in this simplest form it can learn to recognize handwritten digits which is a pretty cool thing for a computer to be able to do and at the same time you\'ll see how it does fall short of a couple hopes that we might have for it has the name suggests neural networks are inspired by the brain but let\'s break that down what are the neurons and in what sense are they linked together right now when i say neuron all i want you to think about is a thing that holds a number specifically a number between. Find one it\'s really not more than that for example the network starts with a bunch of neurons corresponding to each of the 28 * 28 pixels of the input image which is 784 neurons in total each one of these holds a number that represents the grayscale value of the corresponding pixel ranging from 0 for black pixels up to 1 for white pixels this number inside the neuron is called its activation and the image you might have in mind here is that each neuron is lit up when it\'s activation is a high number so all of these 784 neurons make up the first layer of our network no jumping over to the last layer this has tender ones each representing one of the digits the activation in these neurons again some number that\'s between 0 and 1 represents how much the system thinks that a given image corresponds with a given digit there\'s also a couple layers in between called the hidden layers which for the time being to just be a giant question mark for how on earth this process of recognizing digits is going to be handled in this network i chose two hidden layers each one with 16 neurons and admittedly that\'s kind of an arbitrary choice to be honest i chose two layers based on how i want to motivate the structure in just a moment and 16 well that was just a nice number to fit on the screen and practice there is a lot of room for experiment with a specific structure here the way the network operates activations in one layer determine the activation of the next layer and of course the heart of the network as an information processing mechanism comes down to exactly how those activations from one layer bring about activations in the next layer it\'s meant to be loosely analogous to how in biological networks of neurons some groups of neurons firing cause certain others to fire the network i\'m showing here has already been trained to recognize digits and let me show you what i mean by that it means if you feed in an image lighting up all 784 neurons of the input layer according to the brightness of each pixel in the image that pattern of activations causes some very specific pattern in the next layer which causes some pattern in the one after it which finally gives some pattern in the output layer and the brightest neuron of that output layer is the network\'s choice so to speak for what digit this image represents and before jumping into the math for how one layer influences the next or how training works let\'s just talk about why it\'s even reasonable to expect a layered structure like this to behave intelligently what are we expecting here what is the best hope for what those middle layers might be doing well when you were i recognized digits we pieced together various components a nine has a loop up top and a line on the right and eight also has a loop up top but it\'s paired. Set another loop down low a for basically breaks down into three specific lines and things like that and a perfect world we might hope that each neuron in the second to last layer corresponds with one of these sub-components that anytime you feed in an image with a loop up top like a nine or an 8 there\'s. To potentially capture this pattern or any other pixel pattern or the pattern that several edges can make a loop and other such things but what we\'ll do is assign a weight to each one of the connections between our neuron and the neurons from the first layer these weights are just numbers then take all of those activations from the first layer and compute their weighted sum according to these weights i find it helpful to think of these weights as being organized into a little grid of their own and i\'m going to use green pixels to indicate positive weights and red pixels to indicate negative ways where the brightness of that pixel is some loose depiction of the weights value know if we made the weights associated with almost all of the pixels zero except for some positive weights in this region that we care about then taking the weighted sum of all the pixel values really just amounts to adding up the volume of the pixel just in the region that we care about and if you really want to pick up on whether there\'s an edge here what you might do is have some negative weights associated with the surrounding pixels then the sum is largest when those middle pixels are bright but the surrounding pixels are darker when you compute a weighted some like this you might come out with any number but for this network what we want is for activations to be some value between 0 and 1 so a common thing to do is to pump this weighted sum into some function that squishes the real number line into the range between 0 and 1 and a common function that does this is called the sigmoid function also known as a logistic curve basically very negative inputs into close to zero a very positive inputs end up close to 1 and it just steadily increases around the input zero so the activation of the neuron here is basically a measure of how positive the relevant weighted sum is but maybe it\'s not that you want the neuron to light up when the weighted sum is bigger than 0 maybe you only want it to be active when the sun is bigger than say 10 that is you want some bias for it to be inactive what we\'ll do then is just add in some other number like -10 to this weighted sum before plugging it through the sigmoid squishy vacation function that additional number is called the bias so the weights tell you what pixel pattern this neuron in the second layer is picking up on and the bias tells you how high the weighted some needs to be before the neuron starts getting meaningfully active and that is just one neuron every other neuron in this layer is going to be connected to all 784 pixel neurons from the first layer and each one of those 784 connections has its own weight associated with it also each one has some bias some other number that you add on to the weighted sum before squishing it with the sigmoid and that\'s a lot to think about. What does hidden layer of 16 naranja think so let me show you a more notation lately compact way that these connections are represented this is how you see it if you choose to read up more about neural networks organized all of the activations from one layer into a column as a vector then organize all of the weights as a matrix where each row of that matrix corresponds to the connections between one layer and a particular neuron in the next layer what that means is that taking the weighted sum of the activations in the first layer according to these weights corresponds to one of the terms in the matrix vector product of everything we have on the left here by the way so much of machine learning just comes down to having a good grasp of linear algebra so for any of you who want a nice visual understanding for matrices and what matrix vector multiplication means take a look at the series i did on linear algebra especially chapter 3 back to our expression instead of talking about adding the bias to each one of these values independently we represent it by organizing all those biases into a vector and adding the entire vector to the previous matrix vector product then as a final step i\'ll wrap a sigmoid around the outside here and what that\'s supposed to represent is that you\'re going to apply the sigmoid function to each specific component of the resulting vector inside so once you write down this weight matrix and these vectors as their own. You can communicate the full transition of activations from one layer to the next in an extremely tight and neat little expression and this makes the relevant code both a lot simpler and a lot faster since many libraries optimize the heck out of matrix multiplication remember how early i said these neurons are simply things that hold numbers well of course the specific numbers that they hold depends on the image you feed in so it\'s actually more accurate to think of each neuron as a function one that takes in the outputs of all the neurons in the previous layer and spits out a number between 0 and 1 really the entire network is just a function one that takes in 784 numbers as an input and spits out 10 numbers as an output it\'s an absurdly complicated function one that involves 13,000 parameters in the forms of these weights and biases that pick up on certain patterns and which involves iterating many matrix vector products and the sigmoid switch of occasion function but it\'s just a function nonetheless and in a way it\'s kind of reassuring that it looks complicated i mean if it were any simpler what would we have that it could take on the challenge of recognizing digits and how does it take on that challenge how does this network learn the appropriate weights and biases just by looking at data oh that\'s what i\'ll show in the next video and i\'ll also dig a little more into what this particular network we\'re seeing is really doing now is the point i suppose i should say subscribe to stay notified about when that video or any new videos come out but realistically most of you don\'t actually receive notifications from youtube do you maybe more honestly i should say subscribe so that the neural networks that underlie youtubes recommendation algorithm are primed to believe that you want to see content from this channel get recommended to you anyway stay posted for more thank you very much to everyone supporting these videos on patreon i\'ve been a little slow to progress in the probability series this summer but i\'m jumping back into it after this project so patrons you can look out for updates their to close things off here i have with me lisa lee who did her phd work on the theoretical side of deep learning and who currently works at a venture capital firm called amplify partners who kindly provided some of the funding for this video so lisa one thing i think we should quickly bring up is the sigmoid function as i understand it early networks use this to squish the relevant way to some into that interval between 0 and 1 you know kind of motivated by this biological analogy of neurons either being inactive or active exactly but relatively few modern networks actually use sigmoid anymore it\'s kind of old school right yeah or rather you seems to be much easier to train and reload stands for rectified linear unit yes it\'s kind of function where you just taking a max of 0 and a is given by what you were explaining in the video and what this was sort of motivated from i think was a partially by a biological and analogy with how neurons would either. Activated or not and so if it passes a certain threshold it would be the identity function but if it did not then it would just not be activated so be zero so it\'s kind of a simplification using signals didn\'t help training or it was very difficult to train at some point and people just tried really you and it happened to work very well for these incredibly deep neural networks all right thank you alicia. ')
  gen.generateCards()
  cardsJSON = gen.getCards()
  print(type(cardsJSON))
  print(cardsJSON["card1"])

main()